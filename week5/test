

********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 28 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
    - failed after inserting point 2 of 10
    - student   size()    = 2
    - reference size()    = 1
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  1.0 0.5
      B  1.0 0.5
      C  1.0 0.625
      D  1.0 0.375
      E  0.75 0.75
      F  0.25 0.375
      G  0.875 0.75
      H  1.0 0.625
      I  0.875 1.0
      J  0.5 0.25

  * 20 random distinct points in a 16-by-16 grid
    - failed after inserting point 17 of 20
    - student   size()    = 17
    - reference size()    = 16
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  0.0 0.9375
      B  0.5625 0.25
      C  0.5625 0.75
      D  1.0 0.0
      E  0.625 0.9375
      F  0.5 0.875
      G  0.5625 0.625
      H  0.3125 0.5625
      I  0.1875 0.4375
      J  0.0625 0.25
      K  0.8125 0.5625
      L  1.0 0.375
      M  0.75 0.625
      N  0.3125 0.875
      O  0.8125 0.1875
      P  0.375 0.375
      Q  0.5 0.875
      R  1.0 1.0
      S  1.0 0.0625
      T  0.4375 0.6875

  * 10000 random distinct points in a 128-by-128 grid
    - failed after inserting point 282 of 10000
    - student   size()    = 282
    - reference size()    = 281
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed after inserting point 2155 of 100000
    - student   size()    = 2155
    - reference size()    = 2154
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random distinct points in a 65536-by-65536 grid
    - failed after inserting point 68127 of 100000
    - student   size()    = 68127
    - reference size()    = 68126
    - student   isEmpty() = false
    - reference isEmpty() = false

==> FAILED

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 2 of 5
    - student   size()    = 2
    - reference size()    = 1
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  1.0 1.0
      B  1.0 1.0
      C  0.0 0.0
      D  0.0 1.0
      E  0.0 1.0

  * 10 random general points in a 4-by-4 grid
    - failed after inserting point 8 of 10
    - student   size()    = 8
    - reference size()    = 7
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  1.0 0.0
      B  1.0 0.75
      C  0.5 0.0
      D  0.25 0.25
      E  0.0 1.0
      F  0.5 0.75
      G  0.0 0.5
      H  0.0 0.5
      I  0.75 0.75
      J  1.0 0.75

  * 50 random general points in a 8-by-8 grid
    - failed after inserting point 14 of 50
    - student   size()    = 14
    - reference size()    = 13
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random general points in a 16-by-16 grid
    - failed after inserting point 9 of 100000
    - student   size()    = 9
    - reference size()    = 8
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random general points in a 128-by-128 grid
    - failed after inserting point 63 of 100000
    - student   size()    = 63
    - reference size()    = 62
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random general points in a 1024-by-1024 grid
    - failed after inserting point 1490 of 100000
    - student   size()    = 1490
    - reference size()    = 1489
    - student   isEmpty() = false
    - reference isEmpty() = false

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 1.0] x [0.1875, 0.8125]
    - student   range():  A N E N A S D G D V A ...
    - reference range():  A N E N A S D G D V A ...

  * 1000 random distinct points and random rectangles in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.640625, 0.8125] x [0.09375, 0.65625]
    - student   range():  P V S I W J R U N H H ...
    - reference range():  P V S I W J R U N H H ...

  * 10000 random distinct points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.578125, 0.8203125] x [0.578125, 0.609375]
    - student   range():  U O L L U W Y Q X V W ...
    - reference range():  U O L W Y Q X V J O F ...

==> FAILED

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.5, 1.0] x [0.0, 0.0]
    - student   range():  A A A A A A A A A A A ...
    - reference range():  A G

  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.4375, 0.5] x [0.0, 0.9375]
    - student   range():  F G M F F F F F F F F ...
    - reference range():  F G M C Y T B Q K N P ...

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.53125, 0.71875] x [0.3828125, 0.71875]
    - student   range():  E T S J E U K S G V V ...
    - reference range():  E T S J E U K S G V V ...

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
    - failed on trial 0 of 10
    - query rectangle = [0.9375, 1.0] x [0.9375, 1.0]
    - sequence of points inserted:
      A  1.0 1.0
      B  1.0 1.0
      C  1.0 0.25
      D  0.0 0.75
      E  0.75 0.5
      F  1.0 1.0
      G  0.25 0.75
      H  0.5 0.25
      I  0.75 0.5
      J  1.0 0.25
    - student   range():  F F F
    - reference range():  F

  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.599609375, 0.603515625] x [0.529296875, 0.533203125]
    - student   range():  Q Q
    - reference range():  Q

  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> FAILED

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
    - failed on trial 112 of 10000
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point            = (0.228, 0.501)
    - student   nearest()    = (0.4, 0.7)
    - reference nearest()    = (0.2, 0.3)
    - student   distanceTo() = 0.2630304164920856
    - reference distanceTo() = 0.20294087809014724

  * input10.txt
    - failed on trial 9 of 10000
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point            = (0.297, 0.382)
    - student   nearest()    = (0.372, 0.497)
    - reference nearest()    = (0.417, 0.362)
    - student   distanceTo() = 0.1372953021774598
    - reference distanceTo() = 0.1216552506059644

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 35 of 10000
    - sequence of points inserted:
      A  0.0 0.625
      B  0.5 1.0
      C  0.75 0.375
      D  0.125 0.125
      E  0.625 0.875
    - query point            = (1.0, 0.75)
    - student   nearest()    = (0.75, 0.375)
    - reference nearest()    = (0.625, 0.875)
    - student   distanceTo() = 0.45069390943299864
    - reference distanceTo() = 0.39528470752104744

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 35 of 10000
    - sequence of points inserted:
      A  0.8125 0.75
      B  0.5625 0.1875
      C  0.5 0.5
      D  0.1875 0.4375
      E  0.4375 0.625
      F  0.6875 0.375
      G  0.25 0.0625
      H  0.75 0.3125
      I  0.125 1.0
      J  0.875 0.5625
    - query point            = (0.3125, 0.25)
    - student   nearest()    = (0.1875, 0.4375)
    - reference nearest()    = (0.25, 0.0625)
    - student   distanceTo() = 0.22534695471649932
    - reference distanceTo() = 0.19764235376052372

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 10 of 10000
    - sequence of points inserted:
      A  0.3125 0.0
      B  0.59375 0.15625
      C  0.09375 0.84375
      D  1.0 0.53125
      E  0.71875 0.9375
      F  0.8125 0.375
      G  0.21875 0.6875
      H  0.25 0.09375
      I  0.0625 0.4375
      J  0.9375 0.5
      K  0.65625 0.96875
      L  0.03125 0.40625
      M  0.5625 0.1875
      N  0.46875 0.46875
      O  0.875 1.0
      P  0.96875 0.0625
      Q  0.75 0.59375
      R  0.6875 0.78125
      S  0.1875 0.71875
      T  0.78125 0.28125
    - query point            = (0.28125, 0.8125)
    - student   nearest()    = (0.21875, 0.6875)
    - reference nearest()    = (0.1875, 0.71875)
    - student   distanceTo() = 0.13975424859373686
    - reference distanceTo() = 0.13258252147247765

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query point            = (0.984375, 0.375)
    - student   nearest()    = (0.859375, 0.625)
    - reference nearest()    = (0.796875, 0.5625)
    - student   distanceTo() = 0.2795084971874737
    - reference distanceTo() = 0.2651650429449553

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 4 of 10000
    - query point            = (0.1003265380859375, 0.8193817138671875)
    - student   nearest()    = (0.09979248046875, 0.8168792724609375)
    - reference nearest()    = (0.0993194580078125, 0.820098876953125)
    - student   distanceTo() = 0.002558794741707601
    - reference distanceTo() = 0.0012363386168795561

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 60 of 10000
    - sequence of points inserted:
      A  1.0 0.75
      B  0.75 0.375
      C  0.5 0.0
      D  0.75 0.0
      E  1.0 0.5
      F  0.375 0.0
      G  0.875 0.25
      H  0.875 0.625
      I  0.875 0.375
      J  1.0 0.75
      K  0.75 0.75
      L  0.5 0.375
      M  0.875 0.625
      N  1.0 0.125
      O  0.875 0.125
    - query point            = (0.375, 0.25)
    - student   nearest()    = (0.375, 0.0)
    - reference nearest()    = (0.5, 0.375)
    - student   distanceTo() = 0.25
    - reference distanceTo() = 0.1767766952966369

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  0.25 0.25
      B  0.3125 0.8125
      C  1.0 0.5625
      D  0.25 0.625
      E  0.6875 0.5
      F  1.0 1.0
      G  0.75 0.4375
      H  0.75 0.625
      I  0.1875 0.625
      J  0.9375 0.0625
      K  0.0625 0.8125
      L  0.875 0.0
      M  0.4375 0.875
      N  0.9375 0.3125
      O  0.25 0.8125
      P  0.0 1.0
      Q  0.375 0.875
      R  0.625 0.6875
      S  0.875 0.625
      T  0.1875 0.5
    - query point            = (0.3125, 0.4375)
    - student   nearest()    = (0.25, 0.25)
    - reference nearest()    = (0.1875, 0.5)
    - student   distanceTo() = 0.19764235376052372
    - reference distanceTo() = 0.13975424859373686

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point            = (0.53125, 0.8125)
    - student   nearest()    = (0.5625, 0.78125)
    - reference nearest()    = (0.53125, 0.84375)
    - student   distanceTo() = 0.04419417382415922
    - reference distanceTo() = 0.03125

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point            = (0.899444580078125, 0.3036041259765625)
    - student   nearest()    = (0.9040374755859375, 0.3091888427734375)
    - reference nearest()    = (0.899169921875, 0.309417724609375)
    - student   distanceTo() = 0.007230750365417271
    - reference distanceTo() = 0.0058200830055922075

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 7 of 10000
    - query point            = (0.4140625, 0.6015625)
    - student   nearest()    = (0.40625, 0.5703125)
    - reference nearest()    = (0.4140625, 0.609375)
    - student   distanceTo() = 0.03221176270013797
    - reference distanceTo() = 0.0078125

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 3 of 10000
    - query point            = (0.1865234375, 0.076171875)
    - student   nearest()    = (0.1962890625, 0.072265625)
    - reference nearest()    = (0.1845703125, 0.0693359375)
    - student   distanceTo() = 0.010517900013934578
    - reference distanceTo() = 0.007109482313750506

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - failed on trial 4 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point            = (0.48, 0.12)
    - student   nearest()    = (0.7, 0.2)
    - reference nearest()    = (0.7, 0.2)
    - student   distanceTo() = 0.2340939982143925
    - reference distanceTo() = 0.2340939982143925
    - student sequence of kd-tree nodes involved in calls to distanceTo():
      A B C
    - reference sequence of kd-tree nodes involved in calls to distanceTo():
      A B C E

  * input10.txt
    - failed on trial 3 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point            = (0.19, 0.48)
    - student   nearest()    = (0.226, 0.577)
    - reference nearest()    = (0.226, 0.577)
    - student   distanceTo() = 0.10346496991735897
    - reference distanceTo() = 0.10346496991735897
    - student sequence of kd-tree nodes involved in calls to distanceTo():
      A C D
    - reference sequence of kd-tree nodes involved in calls to distanceTo():
      A C D E F

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 6 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.125 0.5
      B  0.25 0.75
      C  0.875 1.0
      D  1.0 0.625
      E  0.75 0.25
    - query point            = (0.5, 0.875)
    - student   nearest()    = (0.25, 0.75)
    - reference nearest()    = (0.25, 0.75)
    - student   distanceTo() = 0.2795084971874737
    - reference distanceTo() = 0.2795084971874737
    - student sequence of kd-tree nodes involved in calls to distanceTo():
      A B C
    - reference sequence of kd-tree nodes involved in calls to distanceTo():
      A B C D E

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 2 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.6875 0.5625
      B  1.0 0.0
      C  0.0 1.0
      D  0.3125 0.3125
      E  0.5625 0.375
      F  0.0625 0.625
      G  0.375 0.6875
      H  0.4375 0.875
      I  0.25 0.8125
      J  0.1875 0.25
    - query point            = (0.75, 0.1875)
    - student   nearest()    = (0.5625, 0.375)
    - reference nearest()    = (0.5625, 0.375)
    - student   distanceTo() = 0.2651650429449553
    - reference distanceTo() = 0.2651650429449553
    - student sequence of kd-tree nodes involved in calls to distanceTo():
      A B C D E
    - reference sequence of kd-tree nodes involved in calls to distanceTo():
      A B C D E G H

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.375 0.59375
      B  0.96875 0.0625
      C  0.6875 0.21875
      D  0.15625 0.53125
      E  1.0 0.90625
      F  0.84375 0.5625
      G  0.0 0.375
      H  0.78125 0.875
      I  0.46875 0.125
      J  0.4375 0.96875
      K  0.21875 0.78125
      L  0.8125 1.0
      M  0.09375 0.03125
      N  0.25 0.15625
      O  0.53125 0.0
      P  0.34375 0.4375
      Q  0.3125 0.3125
      R  0.625 0.84375
      S  0.03125 0.09375
      T  0.875 0.625
    - query point            = (0.5, 0.40625)
    - student   nearest()    = (0.375, 0.59375)
    - reference nearest()    = (0.34375, 0.4375)
    - student   distanceTo() = 0.22534695471649932
    - reference distanceTo() = 0.15934435979977452
    - student sequence of kd-tree nodes involved in calls to distanceTo():
      A B C I J R
    - reference sequence of kd-tree nodes involved in calls to distanceTo():
      A B C I J R E F H D G M N P Q

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 6
    - number of reference entries = 8
  * 50 random non-degenerate points in a 128-by-128 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 8
    - number of reference entries = 14
  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 14
    - number of reference entries = 28
==> FAILED

Test 7: insert n random points; check that repeated calls to get(),
         range(), and nearest() with the same argument yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed

Test 8a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 32 of 20000
    - student   nearest()  = (0.9375, 0.3125)
    - reference nearest()  = (0.75, 0.4375)
    - student   distanceTo() = 0.2795084971874737
    - reference distanceTo() = 0.2576941016011038

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 74 of 20000
    - student   nearest()  = (0.0234375, 0.703125)
    - reference nearest()  = (0.0546875, 0.65625)
    - student   distanceTo() = 0.07851465329000695
    - reference distanceTo() = 0.07202769107260068

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 40 of 20000
    - student   nearest()  = (0.73828125, 0.150390625)
    - reference nearest()  = (0.3662109375, 0.2314453125)
    - student   distanceTo() = 0.2528863228993816
    - reference distanceTo() = 0.14747063813291147

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 19 of 20000
    - student   nearest()  = (0.6015625, 0.152587890625)
    - reference nearest()  = (0.2613525390625, 0.7081298828125)
    - student   distanceTo() = 0.6063246676092441
    - reference distanceTo() = 0.5255509738073291
    - sequence of operations was:
           st.insert(0.6015625, 0.152587890625)
           st.insert(0.5079345703125, 0.669677734375)
           st.contains((0.5909423828125, 0.2808837890625))  ==>  false
           st.insert(0.2613525390625, 0.7081298828125)
           st.range([0.71044921875, 0.9490966796875] x [0.2244873046875, 0.972412109375])  ==>  empty
           st.nearest((0.4085693359375, 0.8892822265625))   ==>  (0.2613525390625, 0.7081298828125)
           st.contains((0.0867919921875, 0.4481201171875))  ==>  false
           st.range([0.51171875, 0.7315673828125] x [0.670654296875, 0.720703125])  ==>  empty
           st.size()  ==>  3
           st.nearest((0.5770263671875, 0.7254638671875))   ==>  (0.5079345703125, 0.669677734375)
           st.size()  ==>  3
           st.insert(0.912353515625, 0.0780029296875)
           st.nearest((0.7080078125, 0.5369873046875))   ==>  (0.5079345703125, 0.669677734375)
           st.range([0.130615234375, 0.5279541015625] x [0.2862548828125, 0.966796875])  ==>  F J
           st.contains((0.746337890625, 0.7066650390625))  ==>  false
           st.range([0.0933837890625, 0.93603515625] x [0.2989501953125, 0.3717041015625])  ==>  empty
           st.range([0.6448974609375, 0.821533203125] x [0.1964111328125, 0.5460205078125])  ==>  empty
           st.insert(0.9140625, 0.89599609375)
           st.nearest((0.003173828125, 0.2503662109375))   ==>  (0.6015625, 0.152587890625)


  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 71 of 20000
    - student   nearest()  = (0.984710693359375, 0.3341217041015625)
    - reference nearest()  = (0.811798095703125, 0.517364501953125)
    - student   distanceTo() = 0.16927047058518985
    - reference distanceTo() = 0.16234749517535835

==> FAILED

Test 8b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 10-by-10 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 43 of 20000
    - student   nearest()  = (0.3, 0.4)
    - reference nearest()  = (0.2, 0.9)
    - student   distanceTo() = 0.31622776601683783
    - reference distanceTo() = 0.20000000000000007

  * 20000 calls with distinct points in a 100-by-100 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 57 of 20000
    - student   nearest()  = (0.45, 0.4)
    - reference nearest()  = (0.31, 0.07)
    - student   distanceTo() = 0.39408120990476064
    - reference distanceTo() = 0.370135110466435

  * 20000 calls with distinct points in a 1000-by-1000 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 173 of 20000
    - student   nearest()  = (0.844, 0.781)
    - reference nearest()  = (0.853, 0.75)
    - student   distanceTo() = 0.13112589370524802
    - reference distanceTo() = 0.11072488428533127

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 66 of 20000
    - student   nearest()  = (0.7027587890625, 0.2105712890625)
    - reference nearest()  = (0.747802734375, 0.00341796875)
    - student   distanceTo() = 0.1535049104712793
    - reference distanceTo() = 0.14687250216368894

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 103 of 20000
    - student   nearest()  = (0.2419891357421875, 0.933746337890625)
    - reference nearest()  = (0.201171875, 0.8914642333984375)
    - student   distanceTo() = 0.07473379322739157
    - reference distanceTo() = 0.05866393217439866

==> FAILED

Test 8c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 20 of 20000
    - rectangle = [1.0, 1.0] x [1.0, 1.0]
    - student   range():  O O
    - reference range():  O
    - sequence of operations was:
           st.insert(1.0, 0.0)
           st.nearest((1.0, 1.0))   ==>  (1.0, 0.0)
           st.contains((1.0, 1.0))  ==>  false
           st.contains((0.0, 0.0))  ==>  false
           st.range([0.0, 1.0] x [0.0, 1.0])  ==>  X
           st.insert(1.0, 1.0)
           st.nearest((1.0, 0.0))   ==>  (1.0, 0.0)
           st.contains((0.0, 0.0))  ==>  false
           st.insert(0.0, 0.0)
           st.contains((1.0, 1.0))  ==>  true
           st.nearest((0.0, 0.0))   ==>  (0.0, 0.0)
           st.range([0.0, 0.0] x [0.0, 0.0])  ==>  E
           st.nearest((1.0, 1.0))   ==>  (1.0, 1.0)
           st.insert(1.0, 1.0)
           st.contains((1.0, 0.0))  ==>  true
           st.insert(0.0, 1.0)
           st.contains((0.0, 1.0))  ==>  true
           st.range([0.0, 0.0] x [0.0, 0.0])  ==>  E
           st.contains((0.0, 1.0))  ==>  true
           st.range([1.0, 1.0] x [1.0, 1.0])  ==>  O O


  * 20000 calls with general points in a 10-by-10 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 60 of 20000
    - student   size() = 20
    - reference size() = 19

  * 20000 calls with general points in a 100-by-100 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 58 of 20000
    - student   nearest()  = (0.54, 0.67)
    - reference nearest()  = (0.43, 0.74)
    - student   distanceTo() = 0.12041594578792295
    - reference distanceTo() = 0.11180339887498954

  * 20000 calls with general points in a 1000-by-1000 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 31 of 20000
    - student   nearest()  = (0.368, 0.833)
    - reference nearest()  = (0.357, 0.788)
    - student   distanceTo() = 0.19285486771144772
    - reference distanceTo() = 0.18086735471057241

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 80 of 20000
    - student   nearest()  = (0.2315673828125, 0.72119140625)
    - reference nearest()  = (0.29541015625, 0.529052734375)
    - student   distanceTo() = 0.34941310807807263
    - reference distanceTo() = 0.24532191021601454

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 22 of 20000
    - student   nearest()  = (0.8642425537109375, 0.760345458984375)
    - reference nearest()  = (0.8824615478515625, 0.6243743896484375)
    - student   distanceTo() = 0.2565347088971405
    - reference distanceTo() = 0.19457646741113543
    - sequence of operations was:
           st.insert(0.335662841796875, 0.240203857421875)
           st.nearest((0.842193603515625, 0.3359527587890625))   ==>  (0.335662841796875, 0.240203857421875)
           st.nearest((0.9504547119140625, 0.1690521240234375))   ==>  (0.335662841796875, 0.240203857421875)
           st.nearest((0.1371002197265625, 0.0432586669921875))   ==>  (0.335662841796875, 0.240203857421875)
           st.range([0.0463714599609375, 0.7415771484375] x [0.1956329345703125, 0.5082244873046875])  ==>  O
           st.nearest((0.3203125, 0.5675811767578125))   ==>  (0.335662841796875, 0.240203857421875)
           st.range([0.2463531494140625, 0.4569244384765625] x [0.2049407958984375, 0.463775634765625])  ==>  O
           st.range([0.215423583984375, 0.5452117919921875] x [0.0616455078125, 0.136871337890625])  ==>  empty
           st.size()  ==>  1
           st.size()  ==>  1
           st.insert(0.8642425537109375, 0.760345458984375)
           st.contains((0.724456787109375, 0.4822998046875))  ==>  false
           st.contains((0.723236083984375, 0.7683258056640625))  ==>  false
           st.insert(0.3711090087890625, 0.9310455322265625)
           st.insert(0.0033111572265625, 0.54541015625)
           st.nearest((0.63836669921875, 0.0501708984375))   ==>  (0.335662841796875, 0.240203857421875)
           st.nearest((0.1879730224609375, 0.9797210693359375))   ==>  (0.3711090087890625, 0.9310455322265625)
           st.insert(0.781280517578125, 0.152099609375)
           st.nearest((0.60888671875, 0.569732666015625))   ==>  (0.8642425537109375, 0.760345458984375)
           st.size()  ==>  5
           st.insert(0.8824615478515625, 0.6243743896484375)
           st.nearest((0.696868896484375, 0.5659332275390625))   ==>  (0.8642425537109375, 0.760345458984375)


==> FAILED

Test 9: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with probabilities
        (p1=0, p2, p3, p4, p5, p6), respectively
        (data structure with 0 points)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.6, 0.0, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.6, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.0, 0.6)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.2, 0.2, 0.2)
==> passed

Test 10: check that two KdTree objects can be created at the same time
==> passed

Test 11: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed


Total: 14/28 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          264                264
=> passed        2          360                360
=> passed        5          648                648
=> passed       10         1128               1128
=> passed       25         2568               2568
=> passed      100         9768               9768
=> passed      400        38568              38568
=> passed      800        76968              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          232                160
=> passed        2          424                288
=> passed        5          712                672
=> passed       10         1192               1312
=> passed       25         2632               3232
=> passed      100         9832              12832
=> passed      400        38632              51232
=> passed      800        77032             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.01 n + 222.05  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1676650
=> passed   320000    1713928
=> passed   640000    1244768
=> passed  1280000     958961
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     382887
=> passed   320000     427314
=> passed   640000     388239
=> passed  1280000     446089
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       3692
=> passed    20000       1776
=> passed    40000        817
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4865
=> passed    20000       2277
=> passed    40000       1007
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000    1194541               0.0              22.1              21.1               0.0
=> passed   320000    1396965               0.0              22.5              21.5               0.0
=> passed   640000    1050180               0.0              24.0              23.0               0.0
=> passed  1280000     881384               0.0              26.1              25.1               0.0
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     515747              18.5              17.5              18.0
=> passed    20000     540324              19.7              18.7              19.2
=> passed    40000     521659              21.8              20.8              21.3
=> passed    80000     492964              22.0              21.0              21.5
=> passed   160000     476247              23.2              22.2              22.7
=> passed   320000     427462              25.0              24.0              24.5
=> passed   640000     384242              25.7              24.7              25.2
=> passed  1280000     324363              27.2              26.2              26.7
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     359976               0.0              31.1              66.0              27.3
=> passed    20000     374455               0.0              32.6              69.6              32.5
=> passed    40000     342109               0.0              39.3              83.1              33.4
=> passed    80000     324638               0.0              40.7              85.9              35.0
=> passed   160000     300147               0.0              42.5              92.0              41.8
=> passed   320000     256932               0.0              40.2              85.5              35.7
=> passed   640000     188545               0.0              43.3              92.2              40.9
=> passed  1280000     150886               0.0              47.0              98.9              37.1
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> passed    10000   453938                  38.9                    0.0                    24.7              23.2
=> passed    20000   470576                  42.9                    0.0                    27.3              25.8
=> passed    40000   440113                  49.6                    0.0                    31.8              30.3
=> passed    80000   451903                  50.8                    0.0                    32.8              31.3
=> passed   160000   410422                  55.4                    0.0                    35.6              34.1
=> passed   320000   378161                  58.3                    0.0                    37.5              36.0
=> passed   640000   332679                  59.5                    0.0                    38.3              36.8
=> passed  1280000   282501                  66.0                    0.0                    43.1              41.6
==> 8/8 tests passed



Total: 28/28 tests passed!


================================================================

